# This workflow will build,publish pages, push to GitHub container registry and deply to AKS ..
name: build and push image to github container registry

on:
  workflow_call:
    inputs:
      build:
        type: boolean
        default: true
      deploy:
        type: boolean
        default: true
    secrets:
      AZURE_CREDENTIALS:
        required: false

  #Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CLUSTER_RESOURCE_GROUP: MyResourceGroup
  CLUSTER_NAME: MyManagedCluster
  CLUSTER_NAMESPACE: demo
  IMAGE_TAG: 0.${{ github.RUN_NUMBER }}.0

jobs:
  build-and-push-image:
    if: ${{ inputs.build }}
    name: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java 17 (GraalVM)
        uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle
        id: build
        env:
          mongodb_host: localhost
        run: ./gradlew build

      - name: Deploy Coverage to GitHub Pages
        if: job.steps.build.status == success() || job.steps.build.status == failure()
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build/reports/jacoco/test/html # The folder the action should deploy.
        continue-on-error: true

      - name: Extract metadata (tags, labels) for registry
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_TAG }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.description="${{ github.event.head_commit.message }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Build and Push Image to Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  deploy:
    if: ${{ inputs.deploy }}
    name: deploy
    needs:
      - build-and-push-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # below only needed if they are not installed in self hosted runners  
      # - uses: elstudio/action-install-azure-cli@v1
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 14
      # - run: sudo apt-get install unzip
      # - uses: azure/setup-helm@v3
      # - uses: Azure/setup-kubectl@v3
      # above only needed if they are not installed in self hosted runners.


      - name: Azure Login
        uses: Azure/login@v1.6.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # add "--public-fqdn" if private cluster
      - name: Set the target Azure Kubernetes Service (AKS) cluster.
        run: |
          az aks get-credentials \
            --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} --overwrite-existing

      - name: Deploy using Helm
        run: |
          helm upgrade \
            --install ${{ github.event.repository.name }} helm-${{ github.event.repository.name }}/  \
            --set image.tag=${{ env.IMAGE_TAG }} --namespace ${{ env.CLUSTER_NAMESPACE }} --create-namespace \
            --wait

      - name: Verify Deployment
        run: kubectl rollout status deployment/${{ github.event.repository.name }} -n ${{ env.CLUSTER_NAMESPACE }}
